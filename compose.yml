version: "3.8"

services:
  api:
    build:
      context: .
    container_name: connect_now_api
    environment:
      CONNECT_AUTH_HASH_SALT_FILE: /run/secrets/auth_hash_salt
      CONNECT_AUTH_SIGNING_KEY_FILE: /run/secrets/auth_signing_key
      CONNECT_POSTGRES_USER_FILE: /run/secrets/postgres_user
      CONNECT_POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      CONNECT_POSTGRES_DB_FILE: /run/secrets/postgres_db
      CONNECT_POSTGRES_HOST: db
      GIN_MODE: release
    depends_on:
      migrate:
        condition: service_completed_successfully
    ports:
    - "80:80"
    secrets:
    - auth_hash_salt
    - auth_signing_key
    - postgres_user
    - postgres_password
    - postgres_db
  
  migrate:
    image: migrate/migrate:v4.17.0
    volumes:
    - ./migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable", "up"]
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: connect_now_postgresql
    image: postgres:16.2
    restart: always
    volumes:
    - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB_FILE: /run/secrets/postgres_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1s
      timeout: 5s
      retries: 10
    secrets:
    - postgres_user
    - postgres_password
    - postgres_db

secrets:
  auth_hash_salt:
    environment: "AUTH_HASH_SALT"
  auth_signing_key:
    environment: "AUTH_SIGNING_KEY"
  postgres_user:
    environment: "POSTGRES_USER"
  postgres_password:
    environment: "POSTGRES_PASSWORD"
  postgres_db:
    environment: "POSTGRES_DB"

volumes:
  postgres_data:
